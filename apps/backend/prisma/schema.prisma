datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "./docs/schema.dbml"
// }

// ユーザー
model User {
  serverUsers      ServerUser[]
  personalSchedule PersonalSchedule[]
  participants     Participant[]
  gameSetting      GameSetting[]
  id               String             @id // Discord ID
  name             String
  avatar           String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastLoggedInAt   DateTime           @default(now())
}

model Server {
  serverUsers ServerUser[]
  calendars   Calendar[]
  id          String       @id @default(uuid())
  name        String
  icon        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// サーバーとユーザーの中間テーブル
model ServerUser {
  server    Server   @relation(fields: [serverId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  serverId  String
  isFavorite Boolean  @default(false)
  isJoined  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@id([userId, serverId])
}

model Calendar {
  publicSchedules   PublicSchedule[]
  personalSchedules PersonalSchedule[]
  id                String             @id @default(uuid())
  server            Server             @relation(fields: [serverId], references: [id])
  serverId          String
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// 公開スケジュール・イベント
model PublicSchedule {
  calendar     Calendar      @relation(fields: [calendarId], references: [id])
  participants Participant[]
  id           Int           @id @default(autoincrement())
  calendarId   String
  date         DateTime
  title        String
  description  String?
  quota        Int?          @default(0)
  isRecruiting Boolean       @default(true)
  createdBy    String
  updatedBy    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isPersonal   Boolean       @default(false)
}

// 個人スケジュール
model PersonalSchedule {
  calendar    Calendar @relation(fields: [calendarId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  id          Int      @id @default(autoincrement())
  calendarId  String
  date        DateTime
  title       String
  userId      String
  description String?
  isPrivate   Boolean  @default(false)
  isFree      Boolean  @default(false)
  createdBy    String
  updatedBy    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPersonal  Boolean  @default(true)
}

// UserとPublicScheduleの中間テーブル
model Participant {
  user             User           @relation(fields: [userId], references: [id])
  publicSchedule   PublicSchedule @relation(fields: [publicScheduleId], references: [id])
  id               Int            @id @default(autoincrement())
  userId           String
  publicScheduleId Int
  reaction         Reaction
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// 参加者の反応
enum Reaction {
  OK // 行く
  UNDECIDED // 行けたら行く（未定）
  NG // 行かない
}

// --- まだ使わないテーブル --- //
model GameTitle {
  gameSetting GameSetting[]
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// UserとGameTitleの中間テーブル
model GameSetting {
  user        User      @relation(fields: [userId], references: [id])
  gameTitle   GameTitle @relation(fields: [gameTitleId], references: [id])
  id          Int       @id @default(autoincrement())
  userId      String
  gameTitleId Int
  sensitivity Float? // マウス感度
  dpi         Int? // マウスDPI
  fov         Int? // FOV
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
